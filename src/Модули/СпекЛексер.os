
// #использовать logus

Функция ТипыТокенов() Экспорт
	Типы = Новый Структура;
	Типы.Вставить("TTArg", "Arg");
	Типы.Вставить("TTOpenPar", "OpenPar");
	Типы.Вставить("TTClosePar", "ClosePar");
	Типы.Вставить("TTOpenSq", "TTOpenSq");
	Типы.Вставить("TTCloseSq", "CloseSq");
	Типы.Вставить("TTChoice", "Choice");
	Типы.Вставить("TTOptions", "Options");
	Типы.Вставить("TTRep", "Rep");
	Типы.Вставить("TTShortOpt", "ShortOpt");
	Типы.Вставить("TTLongOpt", "LongOpt");
	Типы.Вставить("TTOptSeq", "OptSeq");
	Типы.Вставить("TTOptValue", "OptValue");
	Типы.Вставить("TTDoubleDash", "DblDash");
	
	Возврат Типы;
КонецФункции

Функция ПолучитьСпекТокены(Спек) Экспорт
	
	МассивТокенов = Новый Массив; 
	ДлинаСпек = СтрДлина(Спек);
	// Сообщить("Длина спека" + ДлинаСпек);

	ТекущаяПозиция = 1;

	Пока ТекущаяПозиция <= ДлинаСпек Цикл
		ТекущийСимвол = Сред(Спек, ТекущаяПозиция, 1);

		Если ТекущийСимвол = " " Тогда
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = Символы.ПС Тогда
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "[" Тогда
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTOpenSq, ТекущийСимвол, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "]" Тогда
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTCloseSq, ТекущийСимвол, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "(" Тогда
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTOpenPar, ТекущийСимвол, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = ")" Тогда
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTClosePar, ТекущийСимвол, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "|" Тогда
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTChoice, ТекущийСимвол, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "." Тогда
			
			Троеточие = Сред(Спек, ТекущаяПозиция, 3);

			Если Не Троеточие = "..." Тогда
				ВызватьИсключение "Ошибка в строке Спек, неправильно использованы символы <...>, должно быть 3"
			КонецЕсли;
						
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTRep, Троеточие, ТекущаяПозиция));
			ТекущаяПозиция = ТекущаяПозиция + 3;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "-" Тогда
			
			СтартоваяПозиция = ТекущаяПозиция;

			Если ТекущаяПозиция + 1 > ДлинаСпек Тогда
				ВызватьИсключение "Ошибка в строке Спек, не указано имя опции";
			КонецЕсли;

			ТекущаяПозиция = ТекущаяПозиция + 1;
			СледующийСимвол = Сред(Спек, ТекущаяПозиция, 1);
			//Сообщить(Строка(КодСимвола(СледующийСимвол))+ " буква "+ ЭтоБуква(СледующийСимвол));
			Если ЭтоБуква(СледующийСимвол) Тогда
				//Сообщить("Короткий токен");
				ТекущаяПозиция = ТекущаяПозиция + 1;

				Пока ТекущаяПозиция <= ДлинаСпек Цикл
					
					Если Не ЭтоБуква(Сред(Спек, ТекущаяПозиция, 1)) Тогда
						Прервать;
					КонецЕсли;
					ТекущаяПозиция = ТекущаяПозиция + 1;

				КонецЦикла;
			
				ТипТокена = ТипыТокенов().TTShortOpt;
				НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция - СтартоваяПозиция);
				Если СтрДлина(НазваниеТокена) > 2 Тогда
					ТипТокена = ТипыТокенов().TTOptSeq;
					НазваниеТокена = Сред(НазваниеТокена, 1);
				КонецЕсли;
				
				МассивТокенов.Добавить(НовыйТокен(ТипТокена, НазваниеТокена, СтартоваяПозиция));

				Если ТекущаяПозиция < ДлинаСпек И Сред(Спек, ТекущаяПозиция, 1) = "-" Тогда
					ВызватьИсключение "Не правильный синтаксис";
				КонецЕсли;
				
			ИначеЕсли СледующийСимвол = "-" Тогда
			
				ТекущаяПозиция = ТекущаяПозиция + 1;

				//Сообщить("т "+ТекущаяПозиция +" д "+ ДлинаСпек);
				Если ТекущаяПозиция >= ДлинаСпек 
					ИЛИ Сред(Спек, ТекущаяПозиция, 1) = " " Тогда
					
					МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTDoubleDash, "--", СтартоваяПозиция));
					Продолжить;
				КонецЕсли;

				ТекущаяПозиция0 = ТекущаяПозиция;
				Пока ТекущаяПозиция <= ДлинаСпек Цикл
					
					Если Не isOkLongOpt(Сред(Спек, ТекущаяПозиция, 1), ТекущаяПозиция0 = ТекущаяПозиция)  Тогда
						Прервать;
					КонецЕсли;

					ТекущаяПозиция = ТекущаяПозиция + 1;
					

				КонецЦикла;
			
				НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция - СтартоваяПозиция);

				Если СтрДлина(НазваниеТокена) = 2 Тогда
					ВызватьИсключение "Отсуствует наименование длинной опции";
				КонецЕсли;

				МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTLongOpt, НазваниеТокена, СтартоваяПозиция))

			КонецЕсли;
			
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "=" Тогда
			СтартоваяПозиция = ТекущаяПозиция;
			ТекущаяПозиция = ТекущаяПозиция + 1;
			
			Если ТекущаяПозиция >= ДлинаСпек 
				ИЛИ НЕ Сред(Спек, ТекущаяПозиция, 1) = "<" Тогда
				ВызватьИсключение "Отсутствует начало описания опции '=<'";
			КонецЕсли;

			Закрыто = Ложь;
			
			Пока ТекущаяПозиция <= ДлинаСпек Цикл
				
				Закрыто = Сред(Спек, ТекущаяПозиция, 1) = ">";
				Если Закрыто Тогда
					Прервать;
				КонецЕсли;
				ТекущаяПозиция = ТекущаяПозиция + 1;
				
			КонецЦикла;

			Если Не Закрыто Тогда
				ВызватьИсключение "Не закрытое описание опции";
			КонецЕсли;

			Если ТекущаяПозиция - СтартоваяПозиция = 2 Тогда
				ВызватьИсключение "Отсутствует описание опции";
			КонецЕсли;
				
			ТекущаяПозиция = ТекущаяПозиция + 1;
			НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция-СтартоваяПозиция);
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTOptValue, НазваниеТокена, СтартоваяПозиция));
			
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;

		Иначе
			Если isUppercase(ТекущийСимвол) Тогда
			
				СтартоваяПозиция = ТекущаяПозиция;
				ТекущаяПозиция = ТекущаяПозиция + 1;
				
				Пока ТекущаяПозиция <= ДлинаСпек Цикл
					Если Не isOkInArg(Сред(Спек, ТекущаяПозиция, 1)) Тогда
						//Сообщить("Это аргумент");
						Прервать;
					КонецЕсли;
					ТекущаяПозиция = ТекущаяПозиция + 1;
				
				КонецЦикла;

				НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция - СтартоваяПозиция);

				ТипТокена = ТипыТокенов().TTArg;

				Если НазваниеТокена = "OPTIONS" Тогда
					ТипТокена = ТипыТокенов().TTOptions;
				КонецЕсли;
				
				МассивТокенов.Добавить(НовыйТокен(ТипТокена, НазваниеТокена, СтартоваяПозиция))
			Иначе
				Сообщить("Позиция ошибки "+ТекущаяПозиция);
				
				ВызватьИсключение "Неизвестная ошибка";
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;



	Возврат МассивТокенов;

КонецФункции


Функция isOkInArg(ВходящийСимвол) 
	//Сообщить(СтрШаблон("Проверяю %1 UPPER: %2 Число: %3 _: %4", ВходящийСимвол, isUppercase(ВходящийСимвол), ЭтоЧисло(ВходящийСимвол),ВходящийСимвол = "_"));
	return isUppercase(ВходящийСимвол) ИЛИ ЭтоЧисло(ВходящийСимвол) ИЛИ ВходящийСимвол = "_";
КонецФункции

Функция ЭтоБуква(ВходящийСимвол)
	
	Код = КодСимвола(ВходящийСимвол);
	
	Если (Код < 65) или	(Код > 90) и (Код < 97) или (Код > 122)  Тогда    
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция isUppercase(ВходящийСимвол)
	
	//Сообщить(СтрШаблон("Проверяю %1 ВРЕГ %2", ВходящийСимвол, ВходящийСимвол = ВРег(ВходящийСимвол)));
	Возврат ЭтоБуква(ВходящийСимвол) И ВходящийСимвол = ВРег(ВходящийСимвол);
	
КонецФункции


// Если передено число - то истина, иначе ложь
Функция ЭтоЧисло(Значение) Экспорт
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Истина
	Иначе
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;
	КонецЕсли;
КонецФункции


Функция isOkLongOpt(ВходящийСимвол, first)
	return ЭтоБуква(ВходящийСимвол) ИЛИ ЭтоЧисло(ВходящийСимвол) ИЛИ ВходящийСимвол = "_" ИЛИ (НЕ first И ВходящийСимвол = "-")
КонецФункции

Функция НовыйТокен(ТипТокена, Значение, Позиция) Экспорт

	Возврат Новый Структура("Тип, Значение, Позиция", ТипТокена, Значение, Позиция);

КонецФункции


Процедура СообщитьТокен(Токен) Экспорт
	
	Сообщить(СтрШаблон("Тип: %1
	|Значение: %2
	|Пизиция: %3", Токен.Тип, Токен.Значение, Токен.Позиция));

КонецПроцедуры