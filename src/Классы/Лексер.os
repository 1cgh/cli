
Перем СтрокаАнализа;
Перем Токены;

Перем ОшибкаЧтения;
Перем ПодробноеОписаниеОшибки;

Процедура ПриСозданииОбъекта(Знач ВходящаяСтрока)

	СтрокаАнализа = ВходящаяСтрока;
	
	Токены = Новый Массив;
	ОшибкаЧтения = "";
	
	ПодробноеОписаниеОшибки = Новый Структура;

КонецПроцедуры

Функция Прочитать() Экспорт
	
	Токены.Очистить();
	
	ПрочитатьТокены();

	Возврат ЭтотОБъект;

КонецФункции

Функция ЕстьОшибка() Экспорт
	Возврат Не ПустаяСтрока(ОшибкаЧтения);	
КонецФункции

Процедура ПрочитатьТокены()
	Токены.Очистить();

	Чтение = Новый ЧтениеСтроки(Токены);
	
	Пока Чтение.Читать() Цикл
		
		ТекущийСимвол = Чтение.ТекущийСимвол();
		ТекущийИндекс = Чтение.ТекущийИндекс();

		Если Чтение.ЭтоСимвол(" ") 
			ИЛИ Чтение.ЭтоСимвол(Символы.ПС) Тогда
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол("[") Тогда
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTOpenSq, ТекущийСимвол, ТекущийИндекс));
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол("]") Тогда
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTCloseSq, ТекущийСимвол, ТекущийИндекс));
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол("(") Тогда
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTOpenPar, ТекущийСимвол, ТекущийИндекс));
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол(")") Тогда
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTClosePar, ТекущийСимвол, ТекущийИндекс));
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол("|") Тогда
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTChoice, ТекущийСимвол, ТекущийИндекс));
			Продолжить;
		ИначеЕсли Чтение.ЭтоСимвол(".") Тогда
			
			НачальныйИндекс = ТекущийИндекс;

			Троеточие = Чтение.ВСтроку(ТекущийИндекс, ТекущийИндекс+3);

			Если Не Троеточие = "..." Тогда
				ОшибкаЧтения = "Ошибка в строке Спек, неправильно использованы символы <...>, должно быть 3";
				Прервать;
			КонецЕсли;				
			Токены.Добавить(НовыйТокен(ТипыТокенов().TTRep, Троеточие, ТекущийИндекс));
			Чтение.ЧитатьНа(2);
			Продолжить;

		ИначеЕсли Чтение.ЭтоСимвол("-") Тогда
			
			СтартоваяПозиция = ТекущийИндекс;

			Если Не Чтение.Читать() Тогда
				ОшибкаЧтения = "Ошибка в строке Спек, не указано имя опции";
				Прервать;
			КонецЕсли;

			СледующийСимвол = Чтение.ТекущийСимвол();
			
			Если Чтение.ЭтоБуква() Тогда

				Пока Чтение.ЭтоБуква() 
					И Чтение.Читать()  Цикл
					
				КонецЦикла;

				Чтение.Назад();

				ТипТокена = ТипыТокенов().TTShortOpt;
				НазваниеТокена = Чтение.ВСтроку(СтартоваяПозиция, Чтение.ТекущийИндекс());
				
				Если СтрДлина(НазваниеТокена) > 2 Тогда
					ТипТокена = ТипыТокенов().TTOptSeq;
					НазваниеТокена = Сред(НазваниеТокена, 1);
				КонецЕсли;
				
				Токены.Добавить(НовыйТокен(ТипТокена, НазваниеТокена, СтартоваяПозиция));

				Если НЕ Чтение.КонецСтроки() 
					И Чтение.ВЧтениеСтрокиС(Чтение.ТекущийИндекс() + 1).ЭтоСимвол("-") Тогда
					ОшибкаЧтения = "Не правильный синтаксис. Короткой опции";
					Прервать;
				КонецЕсли;
							
			ИначеЕсли Чтение.ЭтоСимвол("-") Тогда
			
				Если Чтение.КонецСтроки()
					ИЛИ Чтение.Читать() И Чтение.ЭтоСимвол(" ") Тогда
					Токены.Добавить(НовыйТокен(ТипыТокенов().TTDoubleDash, "--", СтартоваяПозиция));
					Продолжить;
				КонецЕсли;

				Пока Чтение.ЧитатьПока(ЭтоДлиннаяОпция(Чтение)) Цикл
					
				КонецЦикла;
			
				НазваниеТокена = Чтение.ВСтроку(СтартоваяПозиция, Чтение.ТекущийИндекс());

				Если СтрДлина(НазваниеТокена) = 2 Тогда
					ОшибкаЧтения = "Не правильный синтаксис. Короткой опции";
					Прервать;
				КонецЕсли;

				Токены.Добавить(НовыйТокен(ТипыТокенов().TTLongOpt, НазваниеТокена, СтартоваяПозиция))

			КонецЕсли;
			
			//ТекущаяПозиция = ТекущаяПозиция + 1;
			Продолжить;
		ИначеЕсли ТекущийСимвол = "=" Тогда
			СтартоваяПозиция = ТекущаяПозиция;
			ТекущаяПозиция = ТекущаяПозиция + 1;
			
			Если ТекущаяПозиция >= ДлинаСпек 
				ИЛИ НЕ Сред(Спек, ТекущаяПозиция, 1) = "<" Тогда
				ВызватьИсключение "Отсутствует начало описания опции '=<'";
			КонецЕсли;

			Закрыто = Ложь;
			
			Пока ТекущаяПозиция <= ДлинаСпек Цикл
				
				Закрыто = Сред(Спек, ТекущаяПозиция, 1) = ">";
				Если Закрыто Тогда
					Прервать;
				КонецЕсли;
				ТекущаяПозиция = ТекущаяПозиция + 1;
				
			КонецЦикла;

			Если Не Закрыто Тогда
				ВызватьИсключение "Не закрытое описание опции";
			КонецЕсли;

			Если ТекущаяПозиция - СтартоваяПозиция = 2 Тогда
				ВызватьИсключение "Отсутствует описание опции";
			КонецЕсли;
				
			ТекущаяПозиция = ТекущаяПозиция + 1;
			НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция-СтартоваяПозиция);
			МассивТокенов.Добавить(НовыйТокен(ТипыТокенов().TTOptValue, НазваниеТокена, СтартоваяПозиция));
			
			ТекущаяПозиция = ТекущаяПозиция +1;
			Продолжить;

		Иначе
			Если isUppercase(ТекущийСимвол) Тогда
			
				СтартоваяПозиция = ТекущаяПозиция;
				ТекущаяПозиция = ТекущаяПозиция + 1;
				
				Пока ТекущаяПозиция <= ДлинаСпек Цикл
					Если Не isOkInArg(Сред(Спек, ТекущаяПозиция, 1)) Тогда
						//Сообщить("Это аргумент");
						Прервать;
					КонецЕсли;
					ТекущаяПозиция = ТекущаяПозиция + 1;
				
				КонецЦикла;

				НазваниеТокена = Сред(Спек, СтартоваяПозиция, ТекущаяПозиция - СтартоваяПозиция);

				ТипТокена = ТипыТокенов().TTArg;

				Если НазваниеТокена = "OPTIONS" Тогда
					ТипТокена = ТипыТокенов().TTOptions;
				КонецЕсли;
				
				МассивТокенов.Добавить(НовыйТокен(ТипТокена, НазваниеТокена, СтартоваяПозиция))
			Иначе
				Сообщить("Позиция ошибки "+ТекущаяПозиция);
				
				ВызватьИсключение "Неизвестная ошибка";
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;



	Возврат МассивТокенов;
КонецПроцедуры


Функция ЭтоДлиннаяОпция(Знач ЧтениеСтроки)

	Возврат ЧтениеСтроки.ЭтоБуква() 
		ИЛИ ЧтениеСтроки.ЭтоЧисло() 
		ИЛИ ЧтениеСтроки.ЭтоСимвол("_") 
		ИЛИ ЧтениеСтроки.ЭтоСимвол("-");
	
КонецФункции