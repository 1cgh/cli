
#Использовать delegate

Перем Спек экспорт;
Перем ПодробноеОписание Экспорт;

Перем ДействиеВыполнения Экспорт;
Перем ДействиеПередВыполнением Экспорт;
Перем ДействиеПослеВыполнения Экспорт;

Перем Имя; // текст
Перем Синонимы; // массив строк
Перем Описание; // текст
Перем ВложенныеКоманды;  // Массив классов КомандаПриложения
Перем Опции; // Структура Ключ - Значение (Структура описание опции)
Перем Аргументы; // Структура  

Перем ОпцииИндекс; // Соответствие
Перем АргументыИндекс; // Соответствие

Перем КлассРеализации;

Перем КомандыРодители Экспорт;
Перем ТипОпцииКоманды; // временная структура


Функция ДобавитьПодкоманду(ИмяПодкоманды, ОписаниеПодкоманды, КлассРеализацииПодкоманды) Экспорт

	Подкоманда = Новый КомандаПриложения;
	Подкоманда.Инициализировать(ИмяПодкоманды, ОписаниеПодкоманды, КлассРеализацииПодкоманды);

	Возврат Подкоманда;
	
КонецФункции

Процедура Инициализировать(ИмяКоманды, ОписаниеКоманды, КлассРеализацииКоманды)
	
	Синонимы = СтрРазделить(ИмяКоманды, " ", Ложь);
	Имя = Синонимы[0];
	Описание = ОписаниеКоманды;
	КлассРеализации = КлассРеализацииКоманды;

	ВложенныеКоманды = Новый Массив;
	Опции = Новый Соответствие;
	Аргументы = Новый Соответствие;
	
	ОпцииИндекс = Новый Соответствие;
	АргументыИндекс = Новый Соответствие;
	
	Спек = "";
	ПодробноеОписание = "";

	ДействиеВыполнения = Делегаты.Создать(КлассРеализацииКоманды, "Выполнить");
	ДействиеПередВыполнением = Делегаты.Создать(КлассРеализацииКоманды, "ПередВыполнением");
	ДействиеПослеВыполнения = Делегаты.Создать(КлассРеализацииКоманды, "ПослеВыполнения");
	

	ТипОпцииКоманды = Новый Структура;
	ТипОпцииКоманды.Вставить("Опция", "Опция");
	ТипОпцииКоманды.Вставить("Аргумент", "Аргумент");

КонецПроцедуры

Процедура ЧтениеАргументов()


	
КонецПроцедуры

Процедура НачалоЗапуска() Экспорт
	

	КомандыРодителиДляПодчиненной = Новый Массив;
	КомандыРодителиДляПодчиненной.Добавить(Имя);

	Для каждого КомандаРодитель Из КомандыРодители Цикл
		КомандыРодителиДляПодчиненной.Добавить(КомандаРодитель);
	КонецЦикла;

	Для каждого Подчиненнаякоманда Из ВложенныеКоманды Цикл
		Подчиненнаякоманда.КомандыРодители = КомандыРодителиДляПодчиненной;
	КонецЦикла;

	Если ПустаяСтрока(Спек) Тогда
		
		Если Опции.Количество() > 0 Тогда
			Спек = "[OPTIONS] ";
		КонецЕсли;

		Для каждого арг Из Аргументы Цикл
			Спек = Спек + арг.Имя + " ";
		КонецЦикла;
		
	КонецЕсли;

// 	if len(c.Spec) == 0 {
// 		if len(c.options) > 0 {
// 			c.Spec = "[OPTIONS] "
// 		}
// 		for _, arg := range c.args {
// 			c.Spec += arg.Name + " "
// 		}
// 	}

// 	tokens, err := lexer.Tokenize(c.Spec)
// 	if err != nil {
// 		return err
// 	}

// 	params := parser.Params{
// 		Spec:       c.Spec,
// 		Options:    c.options,
// 		OptionsIdx: c.optionsIdx,
// 		Args:       c.args,
// 		ArgsIdx:    c.argsIdx,
// 	}
// 	s, err := parser.Parse(tokens, params)
// 	if err != nil {
// 		return err
// 	}
// c.fsm = s

КонецПроцедуры

Процедура БулевоОпция(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	БулевоПараметр(Опция, ТипОпцииКоманды.Опция);

	
КонецПроцедуры

Процедура БулевоАргумент(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	БулевоПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаОпция(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Опция);
	
КонецПроцедуры

Процедура СтрокаОпцияКоллекция(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Опция);
	
КонецПроцедуры

Процедура СтрокаАргумент(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаАргументКоллекция(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаПараметр(КлассСтроки, Тип)
	
	Если Тип = ТипОпцииКоманды.Опция Тогда
	
		ДобавитьОпцию(КлассСтроки);
	
	ИначеЕсли Тип = ТипОпцииКоманды.Аргумент Тогда

		ДобавитьАргумент(КлассСтроки);

	Иначе
		ВызватьИсключение "Не корректный тип опции команды";
	
	КонецЕсли;
		
КонецПроцедуры


Процедура БулевоПараметр(КлассБулево, Тип)

	Если Тип = ТипОпцииКоманды.Опция Тогда
	
		ДобавитьОпцию(КлассБулево);
	
	ИначеЕсли Тип = ТипОпцииКоманды.Аргумент Тогда

		ДобавитьАргумент(КлассБулево);

	Иначе
		ВызватьИсключение "Не корректный тип опции команды";
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОпцию(КлассОпции)

	Опции.Вставить(КлассОпции.Имя, КлассОпции);

	Для каждого ИмяПараметра Из КлассОпции.НаименованиеПараметров Цикл
		
		ОпцииИндекс.Вставить(ИмяПараметра, КлассОпции);

	КонецЦикла;

	
КонецПроцедуры

Процедура ДобавитьАргумент(КлассОпции)
	
	Аргументы.Вставить(КлассОпции.Имя, КлассОпции);

	Для каждого ИмяПараметра Из КлассОпции.НаименованиеПараметров Цикл
		
		АргументыИндекс.Вставить(ИмяПараметра, КлассОпции);

	КонецЦикла;

	
КонецПроцедуры