
#Использовать delegate

#Использовать logos

Перем Спек экспорт;
Перем ПодробноеОписание Экспорт;

Перем ДействиеВыполнения Экспорт;
Перем ДействиеПередВыполнением Экспорт;
Перем ДействиеПослеВыполнения Экспорт;

Перем Имя; // текст
Перем Синонимы; // массив строк
Перем Описание; // текст
Перем ВложенныеКоманды;  // Массив классов КомандаПриложения
Перем Опции; // Структура Ключ - Значение (Структура описание опции)
Перем Аргументы; // Структура  

Перем ОпцииИндекс; // Соответствие
Перем АргументыИндекс; // Соответствие

Перем КлассРеализации;

Перем КомандыРодители Экспорт;
Перем ТипОпцииКоманды; // временная структура

Перем fsm;
Перем НачальноеСостояние;

Перем Лог;

Функция ДобавитьПодкоманду(ИмяПодкоманды, ОписаниеПодкоманды, КлассРеализацииПодкоманды) Экспорт

	Подкоманда = Новый КомандаПриложения(ИмяПодкоманды, ОписаниеПодкоманды, КлассРеализацииПодкоманды);

	Возврат Подкоманда;
	
КонецФункции

Процедура ПриСозданииОбъекта(ИмяКоманды, ОписаниеКоманды, КлассРеализацииКоманды)
	
	Синонимы = СтрРазделить(ИмяКоманды, " ", Ложь);
	Имя = Синонимы[0];
	Описание = ОписаниеКоманды;
	КлассРеализации = КлассРеализацииКоманды;

	ВложенныеКоманды = Новый Массив;
	КомандыРодители = Новый Массив;
	Опции = Новый Соответствие;
	Аргументы = Новый Соответствие;
	
	ОпцииИндекс = Новый Соответствие;
	АргументыИндекс = Новый Соответствие;
	
	Спек = "";
	ПодробноеОписание = "";

	ДействиеВыполнения = Делегаты.Создать(КлассРеализацииКоманды, "Выполнить");
	ДействиеПередВыполнением = Делегаты.Создать(КлассРеализацииКоманды, "ПередВыполнением");
	ДействиеПослеВыполнения = Делегаты.Создать(КлассРеализацииКоманды, "ПослеВыполнения");
	

	ТипОпцииКоманды = Новый Структура;
	ТипОпцииКоманды.Вставить("Опция", "Опция");
	ТипОпцииКоманды.Вставить("Аргумент", "Аргумент");

	fsm = Новый ВыборСовпадений();

КонецПроцедуры

Процедура ЧтениеАргументов(АргументыCLI) Экспорт

	nargsLen = ПолучитьОпцииИАргументы(АргументыCLI);

	Лог.Отладка("Количество аргументов команды: %1", АргументыCLI.Количество());
	Лог.Отладка("Количество аргументов команды до подчиненной: %1", nargsLen);

	МассивАргументовКПарсингу = Новый Массив;

	Для ИИ = 1 По nargsLen Цикл
		МассивАргументовКПарсингу.Добавить(АргументыCLI[ИИ-1]);
	КонецЦикла;

	fsm.ПрочитатьАргументы(НачальноеСостояние, МассивАргументовКПарсингу);

	Если nargsLen = АргументыCLI.Количество() Тогда
		Возврат;
	КонецЕсли;

	ПервыйАргумент = АргументыCLI[0];

	Для каждого ВложеннаяКоманда Из ВложенныеКоманды Цикл
		
		Если ВложеннаяКоманда.ЭтоСинонимКоманды(ПервыйАргумент) Тогда
		
			АргументыПодкоманды = АргументыCLI.Удалить(0);
			ВложеннаяКоманда.НачалоЗапуска();
			ВложеннаяКоманда.ЧтениеАргументов(АргументыПодкоманды);
				
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры

Функция ПолучитьОпцииИАргументы(АргументыCLI)
	
	Количество = 0;
	
	Для каждого ТекущийАргумент Из АргументыCLI Цикл
			
		Для каждого ВложеннаяКоманда Из ВложенныеКоманды Цикл
			
			Если ВложеннаяКоманда.ЭтоСинонимКоманды(ТекущийАргумент) Тогда
				Возврат Количество;
			КонецЕсли;

		КонецЦикла;

		Количество = Количество +1;
		
	КонецЦикла;

	Возврат Количество;

КонецФункции

Функция ЭтоСинонимКоманды(СтрокаПроверки) Экспорт
	Возврат Не Синонимы.Найти(СтрокаПроверки) = Неопределено;
КонецФункции

Процедура НачалоЗапуска() Экспорт

	КомандыРодителиДляПодчиненной = Новый Массив;
	КомандыРодителиДляПодчиненной.Добавить(Имя);

	Для каждого КомандаРодитель Из КомандыРодители Цикл
		КомандыРодителиДляПодчиненной.Добавить(КомандаРодитель);
	КонецЦикла;

	Для каждого Подчиненнаякоманда Из ВложенныеКоманды Цикл
		Подчиненнаякоманда.КомандыРодители = КомандыРодителиДляПодчиненной;
	КонецЦикла;

	Если ПустаяСтрока(Спек) Тогда
		
		Если Опции.Количество() > 0 Тогда
			Спек = "[OPTIONS] ";
		КонецЕсли;

		Для каждого арг Из Аргументы Цикл
			Спек = Спек + арг.Имя + " ";
		КонецЦикла;
		
	КонецЕсли;

	токены = СпекЛексер.ПолучитьСпекТокены(Спек);

	ПараметрыПарсера =  Новый Структура;
	ПараметрыПарсера.Вставить("Спек", Спек);	
	ПараметрыПарсера.Вставить("Опции", Опции);	
	ПараметрыПарсера.Вставить("Аргументы", Аргументы);	
	ПараметрыПарсера.Вставить("ОпцииИндекс", ОпцииИндекс);	
	ПараметрыПарсера.Вставить("АргументыИндекс", АргументыИндекс);	
	
	парсер = Новый СпекПарсер(токены, ПараметрыПарсера);
	НачальноеСостояние = парсер.Прочитать();

КонецПроцедуры

Процедура БулевоОпция(Имя, Значение, Описание) Экспорт
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	БулевоПараметр(Опция, ТипОпцииКоманды.Опция);

	
КонецПроцедуры

Процедура БулевоАргумент(Имя, Значение, Описание) Экспорт
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	БулевоПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаОпция(Имя, Значение, Описание) Экспорт
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Опция);
	
КонецПроцедуры

Процедура СтрокаОпцияКоллекция(Имя, Значение, Описание) Экспорт
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Опция);
	
КонецПроцедуры

Процедура СтрокаАргумент(Имя, Значение, Описание) Экспорт
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаАргументКоллекция(Имя, Значение, Описание)
	
	Опция = Новый ОпцияКоманды(Имя, Значение, Описание);

	СтрокаПараметр(Опция, ТипОпцииКоманды.Аргумент);
		
КонецПроцедуры

Процедура СтрокаПараметр(КлассСтроки, Тип)
	
	Если Тип = ТипОпцииКоманды.Опция Тогда
	
		ДобавитьОпцию(КлассСтроки);
	
	ИначеЕсли Тип = ТипОпцииКоманды.Аргумент Тогда

		ДобавитьАргумент(КлассСтроки);

	Иначе
		ВызватьИсключение "Не корректный тип опции команды";
	
	КонецЕсли;
		
КонецПроцедуры


Процедура БулевоПараметр(КлассБулево, Тип)

	Если Тип = ТипОпцииКоманды.Опция Тогда
	
		ДобавитьОпцию(КлассБулево);
	
	ИначеЕсли Тип = ТипОпцииКоманды.Аргумент Тогда

		ДобавитьАргумент(КлассБулево);

	Иначе
		ВызватьИсключение "Не корректный тип опции команды";
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОпцию(КлассОпции)

	Опции.Вставить(КлассОпции.Имя, КлассОпции);

	Для каждого ИмяПараметра Из КлассОпции.НаименованияПараметров Цикл
		
		ОпцииИндекс.Вставить(ИмяПараметра, КлассОпции);

	КонецЦикла;

	
КонецПроцедуры

Процедура ДобавитьАргумент(КлассОпции)
	
	Аргументы.Вставить(КлассОпции.Имя, КлассОпции);

	Для каждого ИмяПараметра Из КлассОпции.НаименованиеПараметров Цикл
		
		АргументыИндекс.Вставить(ИмяПараметра, КлассОпции);

	КонецЦикла;

	
КонецПроцедуры


Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
Лог.УстановитьУровень(УровниЛога.Отладка);