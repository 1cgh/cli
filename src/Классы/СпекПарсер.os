
//#Использовать "../"

Перем Спек;

Перем Опции; // Структура Ключ - Значение (Структура описание опции)
Перем Аргументы; // Структура  

Перем ОпцииИндекс; // Соответствие
Перем АргументыИндекс; // Соответствие

Перем Токены;

Перем ТекущаяПозиция;
Перем НайденныйТокен;

Перем СкинутьОпции;
Перем ТипыТокенов;

Перем fsm;

перем Лог;

Процедура ПриСозданииОбъекта(Знач ТокеныСпек, Знач ПараметрыПарсера)

	Токены = ТокеныСпек;
	Опции = ПараметрыПарсера.Опции;
	Аргументы = ПараметрыПарсера.Аргументы;
	ОпцииИндекс = ПараметрыПарсера.ОпцииИндекс;
	АргументыИндекс = ПараметрыПарсера.АргументыИндекс;
	Спек = ПараметрыПарсера.Спек;
	
	Лог.Отладка("Спек %1", Спек);
	
	ТекущаяПозиция = 0;

	СкинутьОпции = Ложь;

	ТипыТокенов = СпекЛексер.ТипыТокенов();
	
	fsm = Новый ВыборСовпадений();
	
КонецПроцедуры

Функция Прочитать() Экспорт


	Лог.Отладка("Начинаю чтение спека %1", Спек);
	
	Результат = ПрочитатьРекурсивно(Ложь);
		
	Если Не КонецТокенов() Тогда
		ВызватьИсключение "Косяк ппц что делать";
	КонецЕсли;

	НачальноеСостояние = Результат.НачальноеСостояние;
	КонечноеСостояние = Результат.КонечноеСостояние;

	НачальноеСостояние.Подготовить();
	КонечноеСостояние.Завершено = Истина;

	Возврат НачальноеСостояние;

КонецФункции

Функция ПрочитатьРекурсивно(Требуется)

	Лог.Отладка("Рекурсивное чтение %1", Требуется);
	

	НачальноеСостояние = fsm.НовоеСостояние();
	КонечноеСостояние = НачальноеСостояние;


	Если Требуется Тогда

		Результат = ТокенВыбора();
		
		appendComp(КонечноеСостояние, Результат.НачальноеСостояние, Результат.КонечноеСостояние);
		
	КонецЕсли;

	Пока МогуПрочитать() Цикл

		РезультатВЦикле = ТокенВыбора();
		
		appendComp(КонечноеСостояние, РезультатВЦикле.НачальноеСостояние, РезультатВЦикле.КонечноеСостояние);

	КонецЦикла;

	возврат Новый Структура("НачальноеСостояние, КонечноеСостояние", НачальноеСостояние, КонечноеСостояние);
		
КонецФункции

Процедура appendComp(КонечноеСостояние, s, e)
	
	Для каждого Соединение Из s.МассивСоединений Цикл
		КонечноеСостояние.Т(Соединение.Парсер, Соединение.СледующееСостояние);
	КонецЦикла;

	КонечноеСостояние = e;

КонецПроцедуры

Функция ЧтениеДалее()
	
	Лог.Отладка("Вызов <ЧтениеДалее>");

	НачальноеСостояние = fsm.НовоеСостояние();
	КонечноеСостояние = Неопределено;

	Если КонецТокенов() Тогда
		ВызватьИсключение "Не правильная строка использования";

	ИначеЕсли НашлиТокен(ТипыТокенов.TTArg) Тогда

		Имя = НайденныйТокен.Значение;

		КлассОпции = АргументыИндекс[Имя];
		Если КлассОпции = Неопределено Тогда
			Назад();
			Сообщить("Нашли не объявленный аргумент");
			ВызватьИсключение "Ошибка";
		КонецЕсли;

		КонечноеСостояние = НачальноеСостояние.Т(Новый АргументыПарсера(КлассОпции), fsm.НовоеСостояние());
		
	ИначеЕсли НашлиТокен(ТипыТокенов.TTOptions) Тогда

		Если СкинутьОпции Тогда
			Назад();
			Сообщить("нет опций после ---");
			ВызватьИсключение "нет опций после ---";
		КонецЕсли;


		КонечноеСостояние = НачальноеСостояние.Т(Новый ОпцияПарсера(Опции, ОпцииИндекс), fsm.НовоеСостояние());
	ИначеЕсли НашлиТокен(ТипыТокенов.TTShortOpt)
		ИЛИ НашлиТокен(ТипыТокенов.TTLongOpt) Тогда

		Если СкинутьОпции Тогда
			Назад();
			Сообщить("нет опций после ---");
			ВызватьИсключение "нет опций после ---";
		КонецЕсли;

		Имя = НайденныйТокен.Значение;
		
		КлассОпции = ОпцииИндекс[Имя];
		
		Если КлассОпции = Неопределено Тогда
			Назад();
			Сообщить("Нашли не объявленную опцию");
			ВызватьИсключение "Ошибка";
		КонецЕсли;

		КонечноеСостояние = НачальноеСостояние.Т(Новый ОпцияПарсера(КлассОпции, ОпцииИндекс), fsm.НовоеСостояние());
		
		НашлиТокен(ТипыТокенов.TTOptValue); // Хз

	ИначеЕсли НашлиТокен(ТипыТокенов.TTOptSeq) Тогда

		Если СкинутьОпции Тогда
			Назад();
			Сообщить("нет опций после ---");
			ВызватьИсключение "нет опций после ---";
		КонецЕсли;

		ДоступныеОпции = НайденныйТокен.Значение;
		Если СтрНачинаетсяС(ДоступныеОпции, "-") Тогда
			ДоступныеОпции = Прав(ДоступныеОпции, СтрДлина(ДоступныеОпции)-1);
		КонецЕсли;
		МассивДоступныхОпций  = Новый Массив;
		ДлинаОпций = СтрДлина(ДоступныеОпции);
		Для ИИ = 1 По ДлинаОпций Цикл
			
			ИмяОпции = Сред(ДоступныеОпции, ИИ, 1);
			
			КлассОпции = ОпцииИндекс["-"+ИмяОпции];
			
			Если КлассОпции = Неопределено Тогда
				Назад();
				Сообщить("Нашли не объявленную опцию");
				ВызватьИсключение "Ошибка Нашли не объявленную опцию";
			КонецЕсли;
	
			МассивДоступныхОпций.Добавить(КлассОпции);

		КонецЦикла;
		
		КонечноеСостояние = НачальноеСостояние.Т(Новый МассивОпцийПарсера(МассивДоступныхОпций, ОпцииИндекс), fsm.НовоеСостояние());

	ИначеЕсли НашлиТокен(ТипыТокенов.TTOpenPar) Тогда

		РезультатЧтения = ПрочитатьРекурсивно(Истина);

		НачальноеСостояние = РезультатЧтения.НачальноеСостояние;
		КонечноеСостояние = РезультатЧтения.КонечноеСостояние;
		
		ОжидаюТокен(ТипыТокенов.TTClosePar);
		
	ИначеЕсли НашлиТокен(ТипыТокенов.TTOpenSq) Тогда
		РезультатЧтения = ПрочитатьРекурсивно(Истина);
		
		НачальноеСостояние = РезультатЧтения.НачальноеСостояние;
		КонечноеСостояние = РезультатЧтения.КонечноеСостояние;
		НачальноеСостояние.Т(Новый ЛюбойСимвол(), КонечноеСостояние);
		
		ОжидаюТокен(ТипыТокенов.TTCloseSq);

	ИначеЕсли НашлиТокен(ТипыТокенов.TTDoubleDash) Тогда
		
		СкинутьОпции = Истина;
		КонечноеСостояние = НачальноеСостояние.Т(Новый ОпцииЗавершениеПарсера(), fsm.НовоеСостояние());
		
		возврат Новый Структура("НачальноеСостояние, КонечноеСостояние", НачальноеСостояние, КонечноеСостояние);

	КонецЕсли;

	Если НашлиТокен(ТипыТокенов.TTRep) Тогда
		КонечноеСостояние.Т(Новый ЛюбойСимвол(), НачальноеСостояние);
	
	КонецЕсли;

	возврат Новый Структура("НачальноеСостояние, КонечноеСостояние", НачальноеСостояние, КонечноеСостояние);
	
КонецФункции

Функция ТокенВыбора()
	
	Лог.Отладка("Вызов <ТокенВыбора>");
		
	НачальноеСостояние = fsm.НовоеСостояние();
	КонечноеСостояние = fsm.НовоеСостояние();

	Результат = ЧтениеДалее();
	
	ВыборТокена_Адд(НачальноеСостояние, КонечноеСостояние, Результат.НачальноеСостояние, Результат.КонечноеСостояние);

	Пока НашлиТокен(ТипыТокенов.TTChoice) Цикл
		РезультатВЦикле = ЧтениеДалее();
		ВыборТокена_Адд(НачальноеСостояние, КонечноеСостояние, РезультатВЦикле.НачальноеСостояние, РезультатВЦикле.КонечноеСостояние);
	КонецЦикла;
	
	возврат Новый Структура("НачальноеСостояние, КонечноеСостояние", НачальноеСостояние, КонечноеСостояние);
	
КонецФункции

Функция ВыборТокена_Адд(НачальноеСостояние, КонечноеСостояние, s, e)
	
	НачальноеСостояние.Т(Новый ЛюбойСимвол(), s);
	КонечноеСостояние.Т(Новый ЛюбойСимвол(), e);

КонецФункции

Функция ОжидаюТокен(ТипТокена)

	Если НЕ НашлиТокен(ТипТокена) Тогда
		ВызватьИсключение "Не найден ожидаемый токен " + ТипТокена;
	КонецЕсли;
	
КонецФункции

Функция КонецТокенов()

	Лог.Отладка("Вызов <КонецТокенов> %1 >= %2", ТекущаяПозиция, Токены.Количество());
	
	Возврат ТекущаяПозиция >= Токены.Количество();
			
КонецФункции

Процедура Назад()
	
	ТекущаяПозиция = ТекущаяПозиция-1;
			
КонецПроцедуры

Функция Токен()

	Если КонецТокенов() Тогда
		возврат Неопределено;
	КонецЕсли;

	Возврат Токены[ТекущаяПозиция];
	
КонецФункции

Функция ЭтоТокен(Знач ТипТокена)

	Если КонецТокенов() Тогда
		возврат Ложь;
	КонецЕсли;

	
	Лог.Отладка("Проверяю текущий токен:
	| Сверка типов: %1 = %2", Токен().Тип, ТипТокена);
	Возврат Токен().Тип = ТипТокена;
	
КонецФункции

Функция МогуПрочитать()

	Лог.Отладка("Вызов <МогуПрочитать>");

	Если ЭтоТокен(ТипыТокенов.TTArg)
		ИЛИ ЭтоТокен(ТипыТокенов.TTOptions)
		ИЛИ ЭтоТокен(ТипыТокенов.TTShortOpt)
		ИЛИ ЭтоТокен(ТипыТокенов.TTLongOpt)
		ИЛИ ЭтоТокен(ТипыТокенов.TTOptSeq)
		ИЛИ ЭтоТокен(ТипыТокенов.TTOpenPar)
		ИЛИ ЭтоТокен(ТипыТокенов.TTOpenSq)
		ИЛИ ЭтоТокен(ТипыТокенов.TTDoubleDash)
		Тогда

		Возврат Истина;

	Иначе

		Возврат  Ложь
	КонецЕсли;	

	
КонецФункции

Функция НашлиТокен(Знач ТипТокена)

	Если ЭтоТокен(ТипТокена) Тогда

		НайденныйТокен =  Токен();
		
		ТекущаяПозиция = ТекущаяПозиция +1;

		Возврат Истина;

	КонецЕсли;

	Возврат Ложь;

КонецФункции


Лог = Логирование.ПолучитьЛог("oscript.lib.spec_parse");
//Лог.УстановитьУровень(УровниЛога.Отладка);